// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  WAITER
  KITCHEN
  ADMIN
}

model User {
  id                 String   @id @default(uuid())
  registrationNumber String   @unique @map("registration_number") @db.VarChar(30)
  name               String
  email              String   @unique
  avatarUrl          String?  @map("avatar_url")
  passwordHash       String   @map("password_hash")
  role               Role     @default(WAITER)
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  servedOrders Order[]
  tokens       Token[]
  tables       Table[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVERY
}

model Token {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  type      TokenType @default(PASSWORD_RECOVERY)
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("tokens")
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  OUT_OF_SERVICE
}

model Table {
  id          String      @id @default(uuid())
  tableNumber String      @unique @map("table_number")
  location    String?
  status      TableStatus @default(AVAILABLE)

  waiterId   String? @map("waiter_id")
  assignedTo User?   @relation(fields: [waiterId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  orders Order[]
  bills  Bill[]

  @@map("tables")
}

enum DishCategory {
  APPETIZER
  MAIN_COURSE
  DESSERT
  BEVERAGE
  OTHER
}

model Dish {
  id          String       @id @default(uuid())
  slug        String       @unique
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String?      @map("image_url")
  category    DishCategory @default(OTHER)
  createdAt   DateTime     @default(now()) @map("created_at")

  customizations Customization[]
  orderedDishes  OrderItem[]
  reviews        Review[]

  @@map("dishes")
}

model Customization {
  id    String @id @default(uuid())
  name  String
  price Float

  dishId String? @map("dish_id")
  dish   Dish?   @relation(fields: [dishId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  customizedOrderItems OrderItemCustomization[]

  @@map("customizations")
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
}

model Bill {
  id String @id @default(uuid())

  tableId String @map("table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  total         Float
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @map("payment_method")
  createdAt     DateTime      @default(now()) @map("created_at")

  orders Order[]

  @@map("bills")
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

model Order {
  id          String @id @default(uuid())
  orderNumber String @unique @map("order_number")

  tableId String @map("table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  waiterId String @map("waiter_id")
  waiter   User   @relation(fields: [waiterId], references: [id])

  status OrderStatus @default(PENDING)
  total  Float

  createdAt DateTime @default(now()) @map("created_at")

  dishes OrderItem[]

  sessionId String @map("session_id")

  billId String?
  bill   Bill?   @relation(fields: [billId], references: [id])

  @@map("orders")
}

model OrderItem {
  id String @id @default(uuid())

  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  dishId  String @map("dish_id")
  details Dish   @relation(fields: [dishId], references: [id])

  quantity Int
  price    Float

  customizations OrderItemCustomization[]

  @@map("order_items")
}

model OrderItemCustomization {
  id String @id @default(uuid())

  orderItemId String    @map("order_item_id")
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  customizationId String        @map("customization_id")
  details         Customization @relation(fields: [customizationId], references: [id])

  price    Float
  quantity Int

  @@map("order_item_customizations")
}

model Review {
  id        String   @id @default(uuid())
  dishId    String   @map("dish_id")
  dish      Dish     @relation(fields: [dishId], references: [id])
  rating    Int // 1 para não gostei, 2 para gostei
  category  String // A categoria da avaliação (por exemplo, "Serviço", "Qualidade", etc.)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}
